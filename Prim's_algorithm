/* C Code for Prim's algorithm */
/* Created by Soumya Banerjee on 21st November, 2019 */

Code :

#include <stdio.h>
#include <stdlib.h>

int main()
{
    int adj[10][10],i,u,a[10],v,j,k,n,mst[10][10],cost=0,p,min,vertex[10];
    printf("\nEnter the number of vertexes :");
    scanf("%d",&n);
    printf("\nEnter the cost matrix :\n");
    for(i=0;i<n;i++)
    {
        for(j=0;j<n;j++)
        {
            printf("\nEnter adj[%d][%d]=",i,j);
            scanf("%d",&adj[i][j]);
            mst[i][j]=0;
        }
        a[i]=-1;
        vertex[i]=-1;
    }
    printf("\nThe adjacency matrix :\n");
    for(i=0;i<n;i++)
    {
        for(j=0;j<n;j++)
            printf("%d  ",adj[i][j]);
        printf("\n");
    }
    p=0;k=0;a[0]=0;
    while(p!=n-1)
    {
        k=0;min=9999;u=v=-1;
        while(1)
        {
            if(a[k]==-1)
                break;
            else
            {
                i=a[k];
                for(j=0;j<n;j++)
                {
                    if(adj[i][j]<min && adj[i][j]!=0 && vertex[j]==-1)
                    {
                        u=i;v=j;
                        min=adj[i][j];
                    }
                }
                k++;
            }
        }
        cost+=min;
        a[k]=v;
        vertex[u]=vertex[v]=1;
        mst[u][v]=mst[v][u]=adj[u][v];
        adj[u][v]=adj[v][u]=0;
        p++;
    }
    printf("\nThe cost = %d",cost);
    printf("\nThe minimum spanning tree matrix :\n");
    for(i=0;i<n;i++)
    {
        for(j=0;j<n;j++)
            printf("%d  ",mst[i][j]);
        printf("\n");
    }
    return 0;
}


OUTPUT :

Enter the number of vertexes :5

Enter the cost matrix :

Enter adj[0][0]=0

Enter adj[0][1]=1

Enter adj[0][2]=7

Enter adj[0][3]=0

Enter adj[0][4]=0

Enter adj[1][0]=1

Enter adj[1][1]=0

Enter adj[1][2]=5

Enter adj[1][3]=4

Enter adj[1][4]=3

Enter adj[2][0]=7

Enter adj[2][1]=5

Enter adj[2][2]=0

Enter adj[2][3]=0

Enter adj[2][4]=6

Enter adj[3][0]=0

Enter adj[3][1]=4

Enter adj[3][2]=0

Enter adj[3][3]=0

Enter adj[3][4]=2

Enter adj[4][0]=0

Enter adj[4][1]=3

Enter adj[4][2]=6

Enter adj[4][3]=2

Enter adj[4][4]=0

The adjacency matrix :
0  1  7  0  0
1  0  5  4  3
7  5  0  0  6
0  4  0  0  2
0  3  6  2  0

The cost = 11
The minimum spanning tree matrix :
0  1  0  0  0
1  0  5  0  3
0  5  0  0  0
0  0  0  0  2
0  3  0  2  0
